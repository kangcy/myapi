(function (doc, win) {
    // 分辨率Resolution适配
    var docEl = doc.documentElement,
		resizeEvt = 'orientationchange' in window ? 'orientationchange' : 'resize',
		recalc = function () {
		    var clientWidth = docEl.clientWidth;
		    //var clientWidth = document.getElementsByTagName("html")[0].clientWidth - document.getElementsByTagName("html")[0].offsetLeft * 2;
		    if (!clientWidth) return;
		    docEl.style.fontSize = 16 * (400 / 320) + 'px';
		    docEl.style.width = '100%';
		    docEl.style.height = '100%';
		    //docEl.style.overflow = 'hidden';
		};

    if (!doc.addEventListener) return;
    win.addEventListener(resizeEvt, recalc, false);
    doc.addEventListener('DOMContentLoaded', recalc, false);

    // 一物理像素在不同屏幕的显示效果不一样。要根据devicePixelRatio来修改meta标签的scale,要注释上面的meta标签
    (function () {
        return;
        var dpr = scale = 1;
        var isIPhone = win.navigator.appVersion.match(/iphone/gi);
        var devicePixelRatio = win.devicePixelRatio;
        if (isIPhone) {
            // iOS下，对于2和3的屏，用2倍的方案，其余的用1倍方案
            if (devicePixelRatio >= 3 && (!dpr || dpr >= 3)) {
                dpr = 3;
            } else if (devicePixelRatio >= 2 && (!dpr || dpr >= 2)) {
                dpr = 2;
            } else {
                dpr = 1;
            }
        } else {
            // 其他设备下，仍旧使用1倍的方案
            dpr = 1;
        }
        scale = 1 / dpr;
        var metaEl = "";
        metaEl = doc.createElement('meta');
        metaEl.setAttribute('name', 'viewport');
        metaEl.setAttribute('content', 'initial-scale=' + scale + ', maximum-scale=' + scale + ', minimum-scale=' + scale + ', user-scalable=no');
        if (docEl.firstElementChild) {
            docEl.firstElementChild.appendChild(metaEl);
        } else {
            var wrap = doc.createElement('div');
            wrap.appendChild(metaEl);
            doc.write(wrap.innerHTML);
        }
    })();

})(document, window);

//等待框
var waiting = new function () {
    //创建
    this.create = function (title) {
        var item = base.Get("waiting");
        if (item) {
            base.Get("waiting_title").innerHTML = title;
            return item;
        }
        var div = document.createElement('div');
        div.className = 'waiting c333 f13 tc';
        div.setAttribute("id", "waiting");
        div.style.zIndex = "2147483647";
        div.innerHTML = '<div><img src="../images/loading.gif" class="fl" /><span id="waiting_title">' + title + '</span></div>';
        document.getElementsByTagName("body")[0].appendChild(div);
        return div;
    }
    this.setTitle = function (title) {
        var item = this.create(title);
        base.Get("waiting_title").innerHTML = title;
    }
    this.show = function (title) {
        var item = this.create(title);
        item.classList.remove("hide");
    }
    this.close = function () {
        var item = this.create("");
        item.classList.add("hide");
    }
    this.isshow = function () {
        var item = document.getElementById("waiting");
        if (!item) {
            return false;
        }
        return item.className.indexOf("hide") < 0;
    }
}

//是否数组
var isArray = function (obj) {
    return Object.prototype.toString.call(obj) === '[object Array]';
}

//浏览器类型
var browser = {
    versions: function () {
        var u = navigator.userAgent,
			app = navigator.appVersion;
        return { //移动终端浏览器版本信息   
            trident: u.indexOf("Trident") > -1, //IE内核  
            presto: u.indexOf("Presto") > -1, //opera内核  
            webKit: u.indexOf("AppleWebKit") > -1, //苹果、谷歌内核  
            gecko: u.indexOf("Gecko") > -1 && u.indexOf("KHTML") == -1, //火狐内核  
            mobile: !!u.match(/AppleWebKit.*Mobile.*/), //是否为移动终端  
            ios: !!u.match(/\(i[^;]+;( U;)? CPU.+Mac OS X/), //ios终端  
            android: u.indexOf("Android") > -1 || u.indexOf("Linux") > -1, //android终端或者uc浏览器  
            iPhone: u.indexOf("iPhone") > -1, //是否为iPhone或者QQHD浏览器  
            iPad: u.indexOf("iPad") > -1, //是否iPad  
            webApp: u.indexOf("Safari") == -1 //是否web应该程序，没有头部与底部  
        };
    }(),
    language: (navigator.browserLanguage || navigator.language).toLowerCase()
}

var base = new function () {

    /**
	 * 接口错误码
	 **/
    this.ErrorCode = {
        UnLogin: 1,
        Delete: 2,
        NoPower: 3
    }

    /**
	 * 触发层级(触发父元素事件)
	 **/
    this.TriggerMain = false;

    /**
	 * 优酷
	 **/
    this.youku_client_id = "59bec9b0be1fc34b";
    this.youku_client_secret = "244a6bbc4b212e01b8702745b879e52d";

    /**
	 * 是否正在加载
	 **/
    this.IsLoading = false;

    /**
	 * 当前动画标识
	 **/
    this.CurrAnimate = "";

    /**
	 * 列表每次请求数
	 **/
    this.PageSize = 15;

    /**
	 * 接口请求根路径
	 **/
    //this.UploadUrl = "http://www.xiaoweipian.com:1010/";
    this.UploadUrl = "http://localhost/app/";

    /** 
	 * 默认图片
	 **/
    this.DefaultImg = "../images/logo_default.png";

    /**
	 * 默认头像
	 **/
    this.DefaultAvatar = "../images/avatar.png";

    /**
	 * 显示等待、关闭等待
	 **/
    this.ShowLoading = function (show) {
        if (base.Get("loader")) {
            if (show)
                base.Get("loader").classList.remove("hide");
            else
                base.Get("loader").classList.add("hide");
        }
    }

    /**
	 * 显示列表空、关闭列表空
	 **/
    this.ShowNone = function (show) {
        if (show)
            base.Get("none").classList.remove("hide");
        else
            base.Get("none").classList.add("hide");
    }




    /**
	 * 校验字符串是否为空
	 **/
    this.IsNullOrEmpty = function (str) {
        if (!str) {
            return true;
        }
        if (str == "") {
            return true;
        }
        if (str.toString().toLowerCase() == "null") {
            return true;
        }
        if (str.toString().toLowerCase() == "undefined") {
            return true;
        }
        return false;
    }

    /**
	 * 格式化字符串显示
	 **/
    this.FormatStr = function (str, defaultStr) {
        return base.IsNullOrEmpty(str) || str == " " ? defaultStr : str
    }

    /**
	 * 产生一个随机数
	 **/
    this.GetUid = function () {
        return new Date().getTime().toString();
    }

    /**
	 * 手机号码校验
	 **/
    this.CheckPhone = function (phone) {
        if (base.IsNullOrEmpty(phone)) {
            return false;
        }
        return phone.length == 11 && !isNaN(phone) && (/^1[3|4|5|6|7|8|9][0-9]\d{4,8}$/.test(phone));
    };

    /**
	 * 打开等待提示框 
	 **/
    this.ShowWaiting = function (title) {
        waiting.show(title);
    }

    /**
	 * 关闭等待提示框
	 **/
    this.CloseWaiting = function () {
        waiting.close();
    }

    /**
	 * 校验等待提示框
	 **/
    this.CheckWaiting = function () {
        return waiting.isshow();
    }

    /**
	 * 创建弹出层
	 **/
    this.CreateMask = function (enable, callback) {
        var element = document.createElement('div');
        element.classList.add('mui-backdrop');
        element.addEventListener(mui.EVENT_MOVE, mui.preventDefault);
        element.addEventListener('tap', function () {
            if (mask._enable) {
                mask.close();
            }
        });
        var mask = [element];
        mask._show = false;
        mask._enable = enable;
        mask.show = function () {
            mask._show = true;
            element.setAttribute('style', 'opacity:1');
            document.body.appendChild(element);
            return mask;
        };
        mask._remove = function () {
            if (mask._show) {
                mask._show = false;
                element.setAttribute('style', 'opacity:0');
                mui.later(function () {
                    var body = document.body;
                    element.parentNode === body && body.removeChild(element);
                }, 350);
            }
            return mask;
        };
        mask.close = function () {
            mask._remove();
            callback();
        };
        return mask;
    };

    /**
	 * 防止连续点击
	 */
    var Repeat_Action = null;
    this.RepeatAction = function () {
        if (Repeat_Action) {
            return true;
        }
        Repeat_Action = new Date().getTime();
        mui.later(function () {
            Repeat_Action = null;
        }, 1000);
        return false;
    }

    /**
	 * 格式化缩略图显示
	 */
    this.ShowThumbBase = function (url, thumb) {
        if (base.IsNullOrEmpty(url)) {
            return base.DefaultAvatar;
        }
        if (url.indexOf('_0') < 0) {
            return url;
        }
        url = url.replace("_0", "_" + thumb);
        return url;
    }
    this.ShowThumb = function (url, thumb) {
        if (base.IsNullOrEmpty(url)) {
            return base.DefaultAvatar;
        }
        if (url.indexOf('_0') < 0) {
            return url;
        }
        url = url.replace("_0", "_" + thumb);
        if (url.toString().toLowerCase().indexOf("http://") < 0) {
            url = base.UploadUrl + url;
        }
        return url;
    }


    /**
	 * 切换Switch
	 */
    this.SwitchChange = function (id, isopen) {
        base.ToggleClass(["#" + id], "active", isopen);
    }

    /**
	 * js Unicode编码
	 */
    this.UnicodeText = function (str) {
        if (base.IsNullOrEmpty(str)) {
            return "";
        }
        return escape(str).toLocaleLowerCase().replace(/%u/gi, '\\u');
    }

    /**
	 * js Unicode解码
	 */
    this.UnUnicodeText = function (str) {
        if (base.IsNullOrEmpty(str)) {
            return "";
        }
        return unescape(str.replace(/\\u/gi, '%u'));
    }

    /**
	 * 新增样式
	 * name:元素名称集合
	 * classname:样式名称集合
	 */
    this.AddClass = function (name, classname) {
        this.ToggleClass(name, classname, true);
    }

    /**
	 * 删除样式
	 * name:元素名称集合
	 * classname:样式名称集合
	 */
    this.RemoveClass = function (name, classname) {
        this.ToggleClass(name, classname, false);
    }

    /**
	 * 切换样式
	 * name:元素名称集合
	 * classname:样式名称集合
	 */
    this.ToggleClass = function (name, classnames, add) {
        if (base.IsNullOrEmpty(name)) {
            return;
        }
        var classname = classnames.split(' ');
        if (add) {
            mui.each(name, function (index1, n) {
                if (n.indexOf('.') < 0) {
                    var item = mui(n)[0];
                    mui.each(classname, function (index2, cn) {
                        item.classList.add(cn);
                    });
                } else {
                    mui.each(classname, function (index2, cn) {
                        mui(n).each(function (index3, item) {
                            item.classList.add(cn);
                        });
                    });
                }
            });
        } else {
            mui.each(name, function (index1, n) {
                if (n.indexOf('.') < 0) {
                    var item = mui(n)[0];
                    mui.each(classname, function (index2, cn) {
                        item.classList.remove(cn);
                    });
                } else {
                    mui.each(classname, function (index2, cn) {
                        mui(n).each(function (index3, item) {
                            item.classList.remove(cn);
                        });
                    });
                }
            });
        }
    }

    //是否包含样式
    this.HasClass = function (item, name) {
        return item.className.indexOf(name) >= 0;
    }

    //获取对象
    this.Get = function (name) {
        if (name.indexOf('.') < 0) {
            return mui("#" + name)[0];
        } else {
            return mui(name);
        }
    }

    //浏览器前缀
    this.BrowserName = function () {
        var name = "";
        if (browser.versions.webKit) {
            name = "-webkit-"; //谷歌内核
        } else if (browser.versions.gecko) {
            name = "-moz-"; //火狐内核
        } else if (browser.versions.presto) {
            name = "-o-"; //opera内核
        } else if (browser.versions.trident) {
            name = "-ms-"; //IE内核 
        }
        return name;
    }

    //批量赋值
    this.InnerHtml = function (ids, html) {
        var model = null;
        mui.each(ids, function (index, item) {
            model = base.Get(item);
            if (model) {
                model.innerHTML = html;
            }
        });
    }
}

/**
 * Get请求
 **/
function HttpGet(url, data, callback) {
    mui.getJSON(url, data, callback);
}

/**
 * Post请求
 **/
function HttpPost(url, data, callback) {
    mui.post(url, data, callback, 'json');
}

//样式切换
function ChangeSlider($this) {
    var item = $this.parentNode.children[0];
    item.style.width = $this.clientWidth + "px";
    item.style.transform = "translateX(" + $this.offsetLeft + "px)";
    base.RemoveClass([".tabs_item"], "is-active");
    $this.classList.add("is-active");
}

/**
 * 加载封装 
 * url：接口请求地址
 * data：接口请求参数
 * showNone：是否显示空提示
 * showNone：是否显示加载动画
 * appendCallback：拼接方法
 * endCallback：回调方法
 */
function LoadPull(id, url, data, showNone, showAnimate, appendCallback, endCallback) {
    HttpGet(url, data, function (data) {
        //console.log(JSON.stringify(data));
        var foo = "";
        data = JSON.parse(data);
        if (data != null) {
            if (data.result) {
                data = data.message;
                totalpage = data.totalpage;
                records = data.records;
                if (showNone) {
                    base.ShowNone(false);
                }
                var id = base.IsNullOrEmpty(id) ? "scroll-view" : id;
                var table = base.Get(id);
                if (records > 0) {
                    foo = data.list;
                    if (showAnimate) {
                        DelayEachArray(data.list, 0, 50, base.CurrAnimate, function (item) {
                            var div = appendCallback(item);
                            table.appendChild(div);
                        })
                    } else {
                        //使用容器存放临时变更， 最后再一次性更新DOM
                        /*var fragment = document.createDocumentFragment();
						mui.each(data.list, function(index, item) {
							fragment.appendChild(appendCallback(item));
						});
						table.appendChild(fragment);*/

                        mui.each(data.list, function (index, item) {
                            table.appendChild(appendCallback(item));
                        });
                    }
                }
            } else {
                totalpage = 1;
                records = 0;
            }
        }
        if (records == 0 && showNone) {
            base.ShowNone(true);
        }
        if (endCallback) {
            endCallback(foo);
        }
        base.ShowLoading(false);
    });
}

/**
 * 动态加载JS 
 * url：JS地址
 * callback：回调方法
 */
function LoadScript(url, callback) {
    var script = document.createElement("script");
    script.type = "text/javascript";
    if (typeof (callback) != "undefined") {
        if (script.readyState) {
            script.onreadystatechange = function () {
                if (script.readyState == "loaded" || script.readyState == "complete") {
                    script.onreadystatechange = null;
                    callback();
                }
            };
        } else {
            script.onload = function () {
                callback();
            };
        }
    }
    script.src = url;
    document.body.appendChild(script);
}

/**
 * 延迟遍历 
 * arr：集合
 * index：当前遍历索引
 * delay：延迟毫秒数
 * curranimate：当前动画标识
 * callback：回调方法
 */
function DelayEachArray(arr, index, delay, curranimate, callback) {
    if (index == 0) {
        base.CurrAnimate = curranimate;
    }
    if (curranimate != base.CurrAnimate) {
        return;
    }

    if (callback) {
        callback(arr[index]);
    }
    index++;
    if (index < arr.length) {
        mui.later(function () {
            DelayEachArray(arr, index, delay, curranimate, callback);
        }, delay);
    } else {
        base.CurrAnimate = "";
    }
}

//懒加载图片
function LazyImg(item) {
    item.removeAttribute("onload");
    var img = new Image();
    var src = item.getAttribute("data-lazyload");

    img.src = src;
    if (img.complete) {
        item.setAttribute("src", src);
    } else {
        img.onload = function () {
            item.setAttribute("src", src);
        };
    }
}

//图片预加载
function LazyCover(url, callback) {
    var img = new Image();
    img.src = url;
    if (img.complete) {
        callback.call(img);
        return;
    }
    img.onload = function () {
        callback.call(img);
    }
}

function ProgressLoading(container, progress, max) {
    mui.later(function () {
        progress += Math.random() * 20;
        if (progress > max) {
            progress = max;
        }
        container.progressbar().setProgress(progress);
        if (progress < max) {
            ProgressLoading(container, progress, max);
        }
        if (progress >= 100) {
            mui.later(function () {
                container.progressbar().hide();
            }, 250);
        }
    }, Math.random() * 50 + 50);
}

String.prototype.startWith = function (str) {
    var reg = new RegExp("^" + str);
    return reg.test(this);
}

String.prototype.endWith = function (str) {
    var reg = new RegExp(str + "$");
    return reg.test(this);
}